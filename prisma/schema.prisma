// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum InstitutionType {
  UNIVERSITY
  COLLEGE
  SCHOOL
}

enum Role {
  ADMIN
  STUDENT
  INSTITUTION
}

enum OrderStatus {
  SUBMITTED // high school recieved transcript pdf file from students.
  PENDING // high school started issurance. (certificate json and report pdf files will be generated and and stored when this status finish)
  REJECTED // failed issurance.
  ISSUED // issued a transcript
  VERIFIED // verified an issued certificate
}

model Institution {
  id             Int             @id @default(autoincrement())
  name           String          @unique
  location       String
  email          String          @unique
  wallet         String?         @unique
  logo           String
  genre          InstitutionType
  users          User[] // Define a one-to-many relationship with the User model...
  issuerUrl      String?         @map("issuer_url")
  revocationList String?         @map("revocation_list")
  // account  Account[]

  @@map("institutions")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  // institution       Institution? @relation(fields: [institutionId], references: [id]) // Define a nullable reference to the Institution model...
  // institutionId     Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                       String       @id @default(cuid())
  name                     String?
  surname                  String?
  username                 String?      @unique
  email                    String?      @unique
  emailVerified            DateTime?    @map("email_verified")
  emailVerificationToken   String?      @unique @map("email_verification_token")
  passwordHash             String?      @map("password_hash")
  address                  String?      @map("address")
  phone                    String?      @map("phone")
  wallet                   String?      @map("wallet")
  resetPasswordToken       String?      @unique @map("reset_password_token")
  resetPasswordTokenExpiry DateTime?    @map("reset_password_token_expiery")
  image                    String?
  createdAt                DateTime     @default(now()) @map("created_at")
  role                     Role         @default(STUDENT)
  accounts                 Account[]
  sessions                 Session[]
  institution              Institution? @relation(fields: [institutionId], references: [id]) // Define a nullable reference to the Institution model...
  institutionId            Int?

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model NewsletterSubscriber {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now()) @map("created_at")

  @@map("newsletter_subscribers")
}

model Order {
  id                    String      @id @default(cuid())
  userId                String      @map("user_id")
  institutionId         String      @map("institution_id")
  recipientUniversityId String      @map("recipient_university_id")
  file                  String
  status                OrderStatus @default(SUBMITTED)
  unsignedCertificate   Json?       @map("unsigned_certififcate") // certificate file (JSON)
  report                String? // generated report file (PDF)
  signedCertificate     Json?       @map("signed_certificate")
  createdAt             DateTime    @default(now()) @map("created_at")

  @@map("orders")
}
